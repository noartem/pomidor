{"version":3,"sources":["tomato/tomato.module.scss","header/header.module.scss","nav/nav.module.scss","header/index.tsx","nav/index.tsx","history/index.tsx","tomato/index.tsx","period.ts","App.tsx","serviceWorker.ts","index.tsx","history/history.module.scss"],"names":["module","exports","Header","className","styles","header","href","Nav","reset","clearHistory","nav","onClick","History","tomatosCounter","box","list","Array","from","map","val","i","key","role","aria-label","twoDign","n","String","padStart","getTime","time","timeDate","Date","minutes","getMinutes","seconds","getSeconds","calcCompletness","Tomato","togglePlayer","resetButton","circle","value","text","notifyEvent","Event","App","useState","counter","setCounter","setTime","isPlaying","setIsPlaying","useInterval","window","dispatchEvent","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","Notification","requestPermission","e","body","vibrate"],"mappings":"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","file":"static/js/main.a20c2730.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetButton\":\"tomato_resetButton__ITuPx\",\"circle\":\"tomato_circle__1cvKN\",\"innerCircle\":\"tomato_innerCircle__3aOFw\",\"timer\":\"tomato_timer__AoZLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1D-qL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__3EKWO\"};","import React from \"react\";\nimport styles from \"./header.module.scss\";\n\nfunction Header() {\n  return (\n    <header className={styles.header}>\n      <nav>\n        <h1>Pomidor ‚Äî time tracker</h1>\n        <a href=\"https://github.com/noartem\">noartem</a>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport styles from \"./nav.module.scss\";\n\ninterface IProps {\n  reset: VoidFunction;\n  clearHistory: VoidFunction;\n}\n\nfunction Nav({ reset, clearHistory }: IProps) {\n  return (\n    <nav className={styles.nav}>\n      <button onClick={reset}>Reset</button>\n      <button onClick={clearHistory}>Clear</button>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport styles from \"./history.module.scss\";\n\ninterface IProps {\n  tomatosCounter: number;\n}\n\nfunction History({ tomatosCounter }: IProps) {\n  if (tomatosCounter === 0) {\n    return <div></div>;\n  }\n\n  return (\n    <div className={styles.box}>\n      <ul className={styles.list}>\n        {Array.from(Array(tomatosCounter)).map((val, i) => (\n          <li key={i}>\n            <span role=\"img\" aria-label=\"tomato\">\n              üçÖ\n            </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default History;\n","import React from \"react\";\nimport period from \"../period\";\nimport styles from \"./tomato.module.scss\";\n\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nconst twoDign = (n: number) => String(n).padStart(2, \"0\");\n\nfunction getTime(time: number): string {\n  const timeDate = new Date(time * 1000);\n  const minutes = twoDign(timeDate.getMinutes());\n  const seconds = twoDign(timeDate.getSeconds());\n\n  return `${minutes}:${seconds}`;\n}\n\nconst calcCompletness = (time: number): number =>\n  ((period - time) / period) * 100;\n\ninterface IProps {\n  time: number;\n  togglePlayer: VoidFunction;\n}\n\nfunction Tomato({ time, togglePlayer }: IProps) {\n  return (\n    <button onClick={togglePlayer} className={styles.resetButton}>\n      <CircularProgressbar\n        className={styles.circle}\n        value={calcCompletness(time)}\n        text={getTime(time)}\n      />\n    </button>\n  );\n}\n\nexport default Tomato;\n","const period = 25 * 60;\n\nexport default period;\n","import React, { useState } from \"react\";\nimport Header from \"./header\";\nimport Nav from \"./nav\";\nimport History from \"./history\";\nimport Tomato from \"./tomato\";\nimport \"./App.scss\";\n\nimport period from \"./period\";\n\nimport { useInterval } from \"beautiful-react-hooks\";\n\nconst notifyEvent = new Event(\"notifyPom\");\n\nfunction App() {\n  const [counter, setCounter] = useState(0);\n  const [time, setTime] = useState(period);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const togglePlayer = () => setIsPlaying(!isPlaying);\n\n  const reset = () => {\n    setIsPlaying(false);\n    setTime(period);\n  };\n\n  const clearHistory = () => setCounter(0);\n\n  useInterval(() => {\n    if (isPlaying) {\n      if (time === 1) {\n        setCounter(counter + 1);\n        reset();\n        window.dispatchEvent(notifyEvent);\n        return;\n      }\n\n      setTime(time - 1);\n    }\n  }, 1000);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"main\">\n        <Tomato time={time} togglePlayer={togglePlayer} />\n        <Nav reset={reset} clearHistory={clearHistory} />\n        <History tomatosCounter={counter} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (\"serviceWorker\" in navigator) {\n    if (process.env.NODE_ENV === \"production\") {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n\n      window.addEventListener(\"load\", () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              \"This web app is being served cache-first by a service \" +\n                \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n\n    Notification.requestPermission().then(() => {\n      window.addEventListener(\"notifyPom\", (e: CustomEventInit) => {\n        new Notification(\"Pomidor is ready\", {\n          body: \"Your red pomidor is ready, get another one after 5 minutes\",\n          vibrate: [200, 100, 200, 100, 200]\n        });\n      });\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"history_box__1Cjn9\",\"list\":\"history_list__2FKDe\",\"placeHolder\":\"history_placeHolder__1SzZS\"};"],"sourceRoot":""}